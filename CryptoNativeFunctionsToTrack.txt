[X] CryptoNative_Asn1BitStringFree - single call, void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_Asn1ObjectFree - single call, void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_Asn1OctetStringFree - single call, void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_Asn1OctetStringNew => single call, needs ERR_clear_error
[ ] CryptoNative_Asn1OctetStringSet => single call, needs ERR_clear_error
[X] CryptoNative_Asn1StringFree - single call, void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_Asn1StringPrintEx - two calls, covered via Asn1StringToManagedString
[X] CryptoNative_BigNumDestroy - single call, void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_BigNumFromBinary => single call, missing clean up check calltree but likely clear on call site
[X] CryptoNative_BigNumToBinary - single call, doc indicates no error return, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_BioCtrlPending - single call, return pending data amount, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_BioDestroy - single call, not cleared on the caller (likely should be), need to check call tree
[X] CryptoNative_BioGets - single call, covered by CreateOpenSslCryptographicException
[ ] CryptoNative_BioNewFile => handful of calls, need to check call tree for AddCachedCrl, DownloadAndAddCrl, and LoadMachineStores
[ ] CryptoNative_BioRead => all call sites protected but some taking only last error (perhaps we should ensure queue is clear)
[ ] CryptoNative_BioSeek => ops, I missed two locations of this one in previous change
[ ] CryptoNative_BioTell => debug assert but no clean up in case of error
[ ] CryptoNative_BioWrite => Some calls not fully protected, other only last error
[ ] CryptoNative_CheckX509Hostname => Relatively large native, likely leaving errors on queue
[ ] CryptoNative_CheckX509IpAddress => Relatively large native, likely leaving errors on queue
[ ] CryptoNative_CreateMemoryBio => some calls not cleaned, need to check call tree
[X] CryptoNative_D2IPkcs7Bio - covered in push to clean up error queue
[X] CryptoNative_DecodeAsn1BitString - single call, covered by check w/ CheckValidOpensslHandle
[ ] CryptoNative_DecodeAsn1OctetString => DEADCODE
[ ] CryptoNative_DecodeAsn1TypeBytes => single call, needs ERR_clear_error
[X] CryptoNative_DecodeExtendedKeyUsage - single call, covered by CheckValidOpenSslHandle
[X] CryptoNative_DecodePkcs12 - covered in push to clean up error queue
[X] CryptoNative_DecodePkcs12FromBio - covered in push to clean up error queue
[X] CryptoNative_DecodePkcs7 - covered in push to clean up error queue
[X] CryptoNative_DecodeRsaPublicKey - there is other method with same name but the interop is covered by CheckValidOpenSslHandle
[X] CryptoNative_DecodeX509 - covered in push to clean up error queue
[X] CryptoNative_DecodeX509BasicConstraints2Extension - Relatively large native, errors left on queue cleaned on managed side in case of error
[ ] CryptoNative_DecodeX509Crl => single location, missing clean up at usage, check caller
[ ] CryptoNative_DecodeX509Name => single location, missing clean up at usage, check caller
[ ] CryptoNative_DsaCreate => DEADCODE
[X] CryptoNative_DsaDestroy - single call, void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_DsaGenerateKey - single call covered by CreateOpenSslCryptographicException
[ ] CryptoNative_DsaKeyCreateByExplicitParameters => error on managed side is handled, but potential errors in SetDsaParameter on native are not
[X] CryptoNative_DsaSign - two calls covered by CreateOpenSslCryptographicException
[X] CryptoNative_DsaSizeP - single call, docs indicate no error return, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_DsaSizeQ - single call, docs indicate no error return, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_DsaSizeSignature - single call, docs indicate no error return, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_DsaUpRef - single call covered by CreateOpenSslCryptographicException
[ ] CryptoNative_DsaVerify => single call not protected on the caller, need to check calltree
[X] CryptoNative_EcDsaSign - two calls covered by CreateOpenSslCryptographicException
[ ] CryptoNative_EcDsaSize => two locations need to check for 0 return and throw in such cases
[ ] CryptoNative_EcDsaVerify => single call, needs clear error, double-check call tree but seems simple
[ ] CryptoNative_EcKeyCreateByExplicitParameters => 3 calls, relatively large native code, seems covered on managed side need to check if native can return success but leave errors on queue
[ ] CryptoNative_EcKeyCreateByKeyParameters => single call, relatively large native code, not covered
[ ] CryptoNative_EcKeyCreateByOid => 2 calls (plus a handful in tests), needs error clean up
[X] CryptoNative_EcKeyDestroy - single call (plus a handful in tests, void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_EcKeyGenerateKey - 3 calls on src (plus about 10 in tets), all covered in sources.
[ ] CryptoNative_EcKeyGetCurveName2 => DEADCODE
[X] CryptoNative_EcKeyGetCurveType - called only from CryptoNative_GetECKeyParameters will be evaluated in the context of it
[X] CryptoNative_EcKeyUpRef - single call covered by CreateOpenSslCryptographicException
[ ] CryptoNative_EncodeAsn1Integer => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs
[ ] CryptoNative_EncodePkcs12 => single call, 2nd parameter of OpenSslEncode, not covered
[ ] CryptoNative_EncodePkcs7 => single call, 2nd parameter of OpenSslEncode, not covered
[ ] CryptoNative_EncodeX509 => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs
[ ] CryptoNative_EncodeX509SubjectPublicKeyInfo => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs
[X] CryptoNative_EnsureLibSslInitialized - covered in push to clean up error queue
[X] CryptoNative_EnsureOpenSslInitialized - covered in push to clean up error queue
[X] CryptoNative_ErrClearError - clear error queue
[X] CryptoNative_ErrErrorStringN - assuming doesn't log error if receives valid error code
[X] CryptoNative_ErrGetError - remove error from queue
[X] CryptoNative_ErrGetErrorAlloc - small logic on ERR_get_error return value
[X] CryptoNative_ErrPeekError - just peeks at error queue
[X] CryptoNative_ErrPeekLastError - just peeks at error queue
[X] CryptoNative_ErrReasonErrorString - assuming doesn't log error if receives valid error code
[X] CryptoNative_EvpAes128Cbc - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpAes128Ecb - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpAes192Cbc - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpAes192Ecb - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpAes256Cbc - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[x] CryptoNative_EvpAes256Ecb - explicit in table, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpCipherCreate2 - used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpCipherCtxSetPadding - used in OpenSslCipher.OpenKey, covered by CheckBoolReturn
[ ] CryptoNative_EvpCipherDestroy => single location, clean up on native side enough
[X] CryptoNative_EvpCipherFinalEx - single call, covered by CheckBoolReturn
[X] CryptoNative_EvpCipherReset - single call, covered by CheckBoolReturn
[X] CryptoNative_EvpCipherUpdate - single call, covered by CheckBoolReturn
[X] CryptoNative_EvpDes3Cbc - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpDes3Ecb - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpDesCbc - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpDesEcb - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpDigestFinalEx - single call, covered by Check
[X] CryptoNative_EvpDigestReset - single call, covered by Check
[X] CryptoNative_EvpDigestUpdate - single call, covered by Check
[ ] CryptoNative_EvpMd5 => in EvpHashProvider need call via EvpMdSize to clean up error queue, same via HmacHashProvider
[X] CryptoNative_EvpMdCtxCreate - single call, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpMdCtxDestroy - single call, void, assuming doesn't log errors on good argument
[ ] CryptoNative_EvpMdSize => in EvpHashProvider and HmacHashProvider need throws exception but doesn't clear error queue
[X] CryptoNative_EvpPkeyCreate - handful of locations, used in conjuction with respective EvpPkeySet*, covered by CheckValidOpenSslHandle after EvpPkeySet*
[X] CryptoNative_EvpPKeyCtxCreate - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPKeyCtxDestroy - single call, void, assuming doesn't log errors on good argument
[X] CryptoNative_EvpPKeyDeriveSecretAgreement - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeyDestroy - single call, void, assuming doesn't log errors on good argument
[X] CryptoNative_EvpPkeyGetDsa - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeyGetEcKey - 3 calls, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeyGetRsa - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeySetDsa - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeySetEcKey - 4 calls, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpPkeySetRsa - single call, covered by CreateOpenSslCryptographicException
[X] CryptoNative_EvpRC2Cbc - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[X] CryptoNative_EvpRC2Ecb - passed to OpenSslCipher ctor, used in OpenSslCipher.OpenKey via EvpCipherCreate, covered by CheckValidOpenSslHandle
[ ] CryptoNative_EvpSha1 => in EvpHashProvider need call via EvpMdSize to clean up error queue, same via HmacHashProvider
[ ] CryptoNative_EvpSha256 => in EvpHashProvider need call via EvpMdSize to clean up error queue, same via HmacHashProvider
[ ] CryptoNative_EvpSha384 => in EvpHashProvider need call via EvpMdSize to clean up error queue, same via HmacHashProvider
[ ] CryptoNative_EvpSha512 => in EvpHashProvider need call via EvpMdSize to clean up error queue, same via HmacHashProvider
[X] CryptoNative_ExtendedKeyUsageDestory - single call, void, assuming doesn't log errors on good argument
[X] CryptoNative_GetAsn1IntegerDerSize - single call, covered in OpenSslEncode
[ ] CryptoNative_GetAsn1StringBytes => handful of calls, some covered via GetDynamicBuffer others not
[X] CryptoNative_GetBigNumBytes - single call, doc indicates no error return, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_GetDsaParameters => single call, throws exception, should clean up the queue
[X] CryptoNative_GetMaxMdSize - returns const
[ ] CryptoNative_GetMemoryBioSize - 
[ ] CryptoNative_GetObjectDefinitionByName
[ ] CryptoNative_GetPkcs12DerSize
[ ] CryptoNative_GetPkcs7Certificates
[ ] CryptoNative_GetPkcs7DerSize
[ ] CryptoNative_GetRsaParameters
[ ] CryptoNative_GetSslConnectionInfo
[ ] CryptoNative_GetX509CrlNextUpdate => single call, didn't find doc, we should check for null and clean up just in case
[X] CryptoNative_GetX509DerSize - single call, error cleaned in OpenSslEncode
[X] CryptoNative_GetX509EkuField - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_GetX509EkuFieldCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_GetX509EvpPublicKey - single call covered by CheckValidOpenSslHandle
[ ] CryptoNative_GetX509NameEntry => called via GetX509NameEntry_private in GetX509NameEntry, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameEntryCount => single call,  we should check for negative and clean up just in case
[ ] CryptoNative_GetX509NameEntryData => called via GetX509NameEntryData_private in GetX509NameEntryData, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameEntryOid => called via GetX509NameEntryOid_private in GetX509NameEntryOid, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameInfo => single call not covered, needs to clean up error queue
[X] CryptoNative_GetX509NameRawBytes - no actual call to lib
[ ] CryptoNative_GetX509NameStackField => called via GetX509NameStackField_private in GetX509NameStackField, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameStackFieldCount => single call, didn't find doc, we should check for negative and clean up just in case
[X] CryptoNative_GetX509NotAfter - no actual call to lib
[X] CryptoNative_GetX509NotBefore - no actual call to lib
[X] CryptoNative_GetX509PublicKeyAlgorithm - no actual call to lib
[X] CryptoNative_GetX509PublicKeyBytes - no actual call to lib
[ ] CryptoNative_GetX509PublicKeyParameterBytes => two calls, need to check callers of KeyAlgorithmParameters property, and also relatively large native code
[ ] CryptoNative_GetX509RootStoreFile => called via GetX509RootStoreFile_private in GetX509RootStoreFile, needs error clean up in one location
[ ] CryptoNative_GetX509RootStorePath => same as above
[X] CryptoNative_GetX509SignatureAlgorithm - no actual call to lib
[ ] CryptoNative_GetX509StackField => several calls, cleaned in single one, need to check callers before adding throw for them
[X] CryptoNative_GetX509StackFieldCount - single call, didn't find doc, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_GetX509SubjectPublicKeyInfoDerSize - single call covered by OpenSslEncode
[X] CryptoNative_GetX509Thumbprint - single call covered in GetDynamicBuffer
[ ] CryptoNative_GetX509Version => single call throws CryptographicException without cleaning the error queue (should we throw more detailed exception?)
[ ] CryptoNative_HmacCreate
[ ] CryptoNative_HmacDestroy
[ ] CryptoNative_HmacFinal
[ ] CryptoNative_HmacReset
[ ] CryptoNative_HmacUpdate
[ ] CryptoNative_IsSslRenegotiatePending
[ ] CryptoNative_IsSslStateOK
[ ] CryptoNative_LookupFriendlyNameByOid
[ ] CryptoNative_NewX509NameStack => DEADCODE
[ ] CryptoNative_NewX509Stack => two calls, call in ExportPfx needs to be double checked (it is covered if handle reaches PushHandle but need deeper check)
[ ] CryptoNative_ObjNid2Obj
[ ] CryptoNative_ObjObj2Txt
[ ] CryptoNative_ObjSn2Nid
[ ] CryptoNative_ObjTxt2Obj
[ ] CryptoNative_PemReadBioPkcs7
[ ] CryptoNative_PemReadBioX509Crl => two locations, need to check from callers, likely need clean up
[X] CryptoNative_PemReadX509FromBio - covered in push to clean up error queue
[ ] CryptoNative_PemWriteBioX509Crl => single call, return code not checked, add clean up
[ ] CryptoNative_Pkcs12Create
[ ] CryptoNative_Pkcs12Destroy
[ ] CryptoNative_Pkcs12Parse
[ ] CryptoNative_Pkcs7AddCertificate
[ ] CryptoNative_Pkcs7CreateSigned
[ ] CryptoNative_Pkcs7Destroy
[ ] CryptoNative_PushX509NameStackField => DEADCODE
[X] CryptoNative_PushX509StackField - two calls, covered by CreateOpenSslCryptographicException()
[X] CryptoNative_ReadX509AsDerFromBio - covered in push to clean up error queue
[X] CryptoNative_RecursiveFreeX509NameStack - single call, void,  assuming that it doesn't log errorif we pass valid argument 
[X] CryptoNative_RecursiveFreeX509Stack - single call, void,  assuming that it doesn't log errorif we pass valid argument 
[ ] CryptoNative_RsaCreate
[ ] CryptoNative_RsaDestroy
[ ] CryptoNative_RsaGenerateKeyEx
[ ] CryptoNative_RsaPrivateDecrypt
[ ] CryptoNative_RsaPublicEncrypt
[ ] CryptoNative_RsaSign
[ ] CryptoNative_RsaSignPrimitive
[ ] CryptoNative_RsaSize
[ ] CryptoNative_RsaUpRef
[ ] CryptoNative_RsaVerificationPrimitive
[ ] CryptoNative_RsaVerify
[ ] CryptoNative_SetEncryptionPolicy
[ ] CryptoNative_SetProtocolOptions
[ ] CryptoNative_SetRsaParameters
[X] CryptoNative_SetX509ChainVerifyTime - manager wrapper throw in case of failure
[ ] CryptoNative_SslAddExtraChainCert
[ ] CryptoNative_SslCreate
[ ] CryptoNative_SslCtxCheckPrivateKey
[ ] CryptoNative_SslCtxCreate
[ ] CryptoNative_SslCtxDestroy
[ ] CryptoNative_SslCtxSetAlpnProtos
[ ] CryptoNative_SslCtxSetAlpnSelectCb
[ ] CryptoNative_SslCtxSetCertVerifyCallback
[ ] CryptoNative_SslCtxSetClientCertCallback
[ ] CryptoNative_SslCtxSetQuietShutdown
[ ] CryptoNative_SslCtxSetVerify
[ ] CryptoNative_SslCtxUseCertificate
[ ] CryptoNative_SslCtxUsePrivateKey
[ ] CryptoNative_SslDestroy
[ ] CryptoNative_SslDoHandshake
[ ] CryptoNative_SSLEayVersion
[ ] CryptoNative_SslGet0AlpnSelected
[ ] CryptoNative_SslGetClientCAList
[ ] CryptoNative_SslGetError
[ ] CryptoNative_SslGetFinished
[ ] CryptoNative_SslGetPeerCertChain
[ ] CryptoNative_SslGetPeerCertificate
[ ] CryptoNative_SslGetPeerFinished
[ ] CryptoNative_SslGetVersion
[ ] CryptoNative_SslRead
[ ] CryptoNative_SslSessionReused
[ ] CryptoNative_SslSetAcceptState
[ ] CryptoNative_SslSetBio
[ ] CryptoNative_SslSetConnectState
[ ] CryptoNative_SslSetQuietShutdown
[ ] CryptoNative_SslSetTlsExtHostName
[ ] CryptoNative_SslShutdown
[ ] CryptoNative_SslV2_3Method
[ ] CryptoNative_SslWrite
[ ] CryptoNative_UpRefEvpPkey
[ ] CryptoNative_X509CheckIssued => single call not covered, needs to clean up error queue
[X] CryptoNative_X509CheckPurpose - single call covered by throw CreateOpenSslCryptographicException
[X] CryptoNative_X509CrlDestroy - actually calls X509_CRL_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509Destroy - actually calls X509_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509Duplicate => DEADCODE
[ ] CryptoNative_X509ExtensionCreateByObj => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs
[X] CryptoNative_X509ExtensionDestroy - actually calls X509_EXTENSION_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509ExtensionGetCritical - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_X509ExtensionGetData - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509ExtensionGetOid - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509GetExt - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509GetExtCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_X509GetIssuerName - single call covered by ChecckValidOpenSslHandle in LoadX500Name
[ ] CryptoNative_X509GetSerialNumber => called via X509GetSerialNumber_private in X509GetSerialNumber, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[X] CryptoNative_X509GetSubjectName - single call covered by ChecckValidOpenSslHandle in LoadX500Name
[ ] CryptoNative_X509IssuerNameHash => single call returns hash, likely doesn't log errorif we pass valid argument, https://github.com/dotnet/corefx/issues/28724
[X] CryptoNative_X509NameDestroy - actually calls X509_NAME_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreAddCert - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509StoreAddCrl - covered in push to clean up error queue
[X] CryptoNative_X509StoreCreate - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509StoreCtxCreate - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509StoreCtxDestroy - actually calls X509_STORE_CTX_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509StoreCtxGetChain => single call not covered, although calling method throws CryptographicException on other points
[ ] CryptoNative_X509StoreCtxGetError => single call returns code, likely doesn't log errorif we pass valid argument
[ ] CryptoNative_X509StoreCtxGetErrorDepth => single call returns code, likely doesn't log errorif we pass valid argument
[X] CryptoNative_X509StoreCtxGetSharedUntrusted - no actual call to lib
[X] CryptoNative_X509StoreCtxGetTargetCert - no actual call to lib
[X] CryptoNative_X509StoreCtxInit - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509StoreCtxSetVerifyCallback- single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreDestoryactually - calls X509_STORE_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreSetRevocationFlag - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509UpRef - called in many places,  internally calls CRYPTO_add, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509V3ExtPrint => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs
[ ] CryptoNative_X509VerifyCert => 2 calls one not covered in VerifyCertChain in src\System.Net.Http\src\System\Net\Http\CurlHandler\CurlHandler.SslProvider.Linux.cs
[X] CryptoNative_X509VerifyCertErrorString - single call, returns string for error code, likely doesn't log errorif we pass valid error code
