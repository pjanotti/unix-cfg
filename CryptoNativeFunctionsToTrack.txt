[ ] CryptoNative_Asn1BitStringFree
[ ] CryptoNative_Asn1ObjectFree
[ ] CryptoNative_Asn1OctetStringFree
[ ] CryptoNative_Asn1OctetStringNew
[ ] CryptoNative_Asn1OctetStringSet
[ ] CryptoNative_Asn1StringFree
[ ] CryptoNative_Asn1StringPrintEx
[ ] CryptoNative_BigNumDestroy
[ ] CryptoNative_BigNumFromBinary
[ ] CryptoNative_BigNumToBinary
[ ] CryptoNative_BioCtrlPending
[ ] CryptoNative_BioDestroy
[ ] CryptoNative_BioGets
[ ] CryptoNative_BioNewFile
[ ] CryptoNative_BioRead
[ ] CryptoNative_BioSeek
[ ] CryptoNative_BioTell
[ ] CryptoNative_BioWrite
[ ] CryptoNative_CheckX509Hostname => Relatively large native, likely leaving errors on queue
[ ] CryptoNative_CheckX509IpAddress => Relatively large native, likely leaving errors on queue
[ ] CryptoNative_CreateMemoryBio
[ ] CryptoNative_D2IPkcs7Bio
[ ] CryptoNative_DecodeAsn1BitString
[ ] CryptoNative_DecodeAsn1OctetString
[ ] CryptoNative_DecodeAsn1TypeBytes
[ ] CryptoNative_DecodeExtendedKeyUsage
[ ] CryptoNative_DecodePkcs12
[ ] CryptoNative_DecodePkcs12FromBio
[ ] CryptoNative_DecodePkcs7
[ ] CryptoNative_DecodeRsaPublicKey
[X] CryptoNative_DecodeX509 - covered in push to clean up error queue
[X] CryptoNative_DecodeX509BasicConstraints2Extension - Relatively large native, errors left on queue cleaned on managed side in case of error
[ ] CryptoNative_DecodeX509Crl => single location, missing clean up at usage, check caller
[ ] CryptoNative_DecodeX509Name => single location, missing clean up at usage, check caller
[ ] CryptoNative_DsaCreate
[ ] CryptoNative_DsaDestroy
[ ] CryptoNative_DsaGenerateKey
[ ] CryptoNative_DsaKeyCreateByExplicitParameters
[ ] CryptoNative_DsaSign
[ ] CryptoNative_DsaSizeP
[ ] CryptoNative_DsaSizeQ
[ ] CryptoNative_DsaSizeSignature
[ ] CryptoNative_DsaUpRef
[ ] CryptoNative_DsaVerify
[ ] CryptoNative_EcDsaSign
[ ] CryptoNative_EcDsaSize
[ ] CryptoNative_EcDsaVerify
[ ] CryptoNative_EcKeyCreateByExplicitParameters
[ ] CryptoNative_EcKeyCreateByKeyParameters
[ ] CryptoNative_EcKeyCreateByOid
[ ] CryptoNative_EcKeyDestroy
[ ] CryptoNative_EcKeyGenerateKey
[ ] CryptoNative_EcKeyGetCurveName2
[ ] CryptoNative_EcKeyGetCurveType
[ ] CryptoNative_EcKeyUpRef
[ ] CryptoNative_EncodeAsn1Integer
[ ] CryptoNative_EncodePkcs12
[ ] CryptoNative_EncodePkcs7
[ ] CryptoNative_EncodeX509 => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs
[ ] CryptoNative_EncodeX509SubjectPublicKeyInfo => single location, assert checks no error but for safety error needs to be cleaned in OpenSslEncode src\Common\src\Interop\Unix\System.Security.Cryptography.Native\Interop.Encode.cs
[ ] CryptoNative_EnsureLibSslInitialized
[ ] CryptoNative_EnsureOpenSslInitialized
[ ] CryptoNative_ErrClearError
[ ] CryptoNative_ErrErrorStringN
[ ] CryptoNative_ErrGetError
[ ] CryptoNative_ErrGetErrorAlloc
[ ] CryptoNative_ErrPeekError
[ ] CryptoNative_ErrPeekLastError
[ ] CryptoNative_ErrReasonErrorString
[ ] CryptoNative_EvpAes128Cbc
[ ] CryptoNative_EvpAes128Ecb
[ ] CryptoNative_EvpAes192Cbc
[ ] CryptoNative_EvpAes192Ecb
[ ] CryptoNative_EvpAes256Cbc
[ ] CryptoNative_EvpAes256Ecb
[ ] CryptoNative_EvpCipherCreate2
[ ] CryptoNative_EvpCipherCtxSetPadding
[ ] CryptoNative_EvpCipherDestroy
[ ] CryptoNative_EvpCipherFinalEx
[ ] CryptoNative_EvpCipherReset
[ ] CryptoNative_EvpCipherUpdate
[ ] CryptoNative_EvpDes3Cbc
[ ] CryptoNative_EvpDes3Ecb
[ ] CryptoNative_EvpDesCbc
[ ] CryptoNative_EvpDesEcb
[ ] CryptoNative_EvpDigestFinalEx
[ ] CryptoNative_EvpDigestReset
[ ] CryptoNative_EvpDigestUpdate
[ ] CryptoNative_EvpMd5
[ ] CryptoNative_EvpMdCtxCreate
[ ] CryptoNative_EvpMdCtxDestroy
[ ] CryptoNative_EvpMdSize
[ ] CryptoNative_EvpPkeyCreate
[ ] CryptoNative_EvpPKeyCtxCreate
[ ] CryptoNative_EvpPKeyCtxDestroy
[ ] CryptoNative_EvpPKeyDeriveSecretAgreement
[ ] CryptoNative_EvpPkeyDestroy
[ ] CryptoNative_EvpPkeyGetDsa
[ ] CryptoNative_EvpPkeyGetEcKey
[ ] CryptoNative_EvpPkeyGetRsa
[ ] CryptoNative_EvpPkeySetDsa
[ ] CryptoNative_EvpPkeySetEcKey
[ ] CryptoNative_EvpPkeySetRsa
[ ] CryptoNative_EvpRC2Cbc
[ ] CryptoNative_EvpRC2Ecb
[ ] CryptoNative_EvpSha1
[ ] CryptoNative_EvpSha256
[ ] CryptoNative_EvpSha384
[ ] CryptoNative_EvpSha512
[ ] CryptoNative_ExtendedKeyUsageDestory
[ ] CryptoNative_ForceOpenSslErrorQueueCleanupBeforeWriteRead
[ ] CryptoNative_GetAsn1IntegerDerSize
[ ] CryptoNative_GetAsn1StringBytes
[ ] CryptoNative_GetBigNumBytes
[ ] CryptoNative_GetDsaParameters
[ ] CryptoNative_GetMaxMdSize
[ ] CryptoNative_GetMemoryBioSize
[ ] CryptoNative_GetObjectDefinitionByName
[ ] CryptoNative_GetPkcs12DerSize
[ ] CryptoNative_GetPkcs7Certificates
[ ] CryptoNative_GetPkcs7DerSize
[ ] CryptoNative_GetRsaParameters
[ ] CryptoNative_GetSslConnectionInfo
[ ] CryptoNative_GetX509CrlNextUpdate => single call, didn't find doc, we should check for null and clean up just in case
[X] CryptoNative_GetX509DerSize - single call, error cleaned in OpenSslEncode
[X] CryptoNative_GetX509EkuField - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_GetX509EkuFieldCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_GetX509EvpPublicKey - single call covered by CheckValidOpenSslHandle
[ ] CryptoNative_GetX509NameEntry => called via GetX509NameEntry_private in GetX509NameEntry, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameEntryCount => single call,  we should check for negative and clean up just in case
[ ] CryptoNative_GetX509NameEntryData => called via GetX509NameEntryData_private in GetX509NameEntryData, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameEntryOid => called via GetX509NameEntryOid_private in GetX509NameEntryOid, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameInfo => single call not covered, needs to clean up error queue
[X] CryptoNative_GetX509NameRawBytes - no actual call to lib
[ ] CryptoNative_GetX509NameStackField => called via GetX509NameStackField_private in GetX509NameStackField, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[ ] CryptoNative_GetX509NameStackFieldCount => single call, didn't find doc, we should check for negative and clean up just in case
[X] CryptoNative_GetX509NotAfter - no actual call to lib
[X] CryptoNative_GetX509NotBefore - no actual call to lib
[X] CryptoNative_GetX509PublicKeyAlgorithm - no actual call to lib
[X] CryptoNative_GetX509PublicKeyBytes - no actual call to lib
[ ] CryptoNative_GetX509PublicKeyParameterBytes => two calls, need to check callers of KeyAlgorithmParameters property, and also relatively large native code
[ ] CryptoNative_GetX509RootStoreFile => called via GetX509RootStoreFile_private in GetX509RootStoreFile, needs error clean up in one location
[ ] CryptoNative_GetX509RootStorePath => same as above
[X] CryptoNative_GetX509SignatureAlgorithm - no actual call to lib
[ ] CryptoNative_GetX509StackField => several calls, cleaned in single one, need to check callers before adding throw for them
[X] CryptoNative_GetX509StackFieldCount - single call, didn't find doc, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_GetX509SubjectPublicKeyInfoDerSize - single call covered by OpenSslEncode
[X] CryptoNative_GetX509Thumbprint - single call covered in GetDynamicBuffer
[ ] CryptoNative_GetX509Version => single call throws CryptographicException without cleaning the error queue (should we throw more detailed exception?)
[ ] CryptoNative_HmacCreate
[ ] CryptoNative_HmacDestroy
[ ] CryptoNative_HmacFinal
[ ] CryptoNative_HmacReset
[ ] CryptoNative_HmacUpdate
[ ] CryptoNative_IsSslRenegotiatePending
[ ] CryptoNative_IsSslStateOK
[ ] CryptoNative_LookupFriendlyNameByOid
[ ] CryptoNative_NewX509NameStack => DEADCODE
[ ] CryptoNative_NewX509Stack => two calls, call in ExportPfx needs to be double checked (it is covered if handle reaches PushHandle but need deeper check)
[ ] CryptoNative_ObjNid2Obj
[ ] CryptoNative_ObjObj2Txt
[ ] CryptoNative_ObjSn2Nid
[ ] CryptoNative_ObjTxt2Obj
[ ] CryptoNative_PemReadBioPkcs7
[ ] CryptoNative_PemReadBioX509Crl => two locations, need to check from callers, likely need clean up
[X] CryptoNative_PemReadX509FromBio - covered in push to clean up error queue
[ ] CryptoNative_PemWriteBioX509Crl => single call, return code not checked, add clean up
[ ] CryptoNative_Pkcs12Create
[ ] CryptoNative_Pkcs12Destroy
[ ] CryptoNative_Pkcs12Parse
[ ] CryptoNative_Pkcs7AddCertificate
[ ] CryptoNative_Pkcs7CreateSigned
[ ] CryptoNative_Pkcs7Destroy
[ ] CryptoNative_PushX509NameStackField => DEADCODE
[X] CryptoNative_PushX509StackField - two calls, covered by CreateOpenSslCryptographicException()
[X] CryptoNative_ReadX509AsDerFromBio - covered in push to clean up error queue
[X] CryptoNative_RecursiveFreeX509NameStack - single call, void,  assuming that it doesn't log errorif we pass valid argument 
[X] CryptoNative_RecursiveFreeX509Stack - single call, void,  assuming that it doesn't log errorif we pass valid argument 
[ ] CryptoNative_RsaCreate
[ ] CryptoNative_RsaDestroy
[ ] CryptoNative_RsaGenerateKeyEx
[ ] CryptoNative_RsaPrivateDecrypt
[ ] CryptoNative_RsaPublicEncrypt
[ ] CryptoNative_RsaSign
[ ] CryptoNative_RsaSignPrimitive
[ ] CryptoNative_RsaSize
[ ] CryptoNative_RsaUpRef
[ ] CryptoNative_RsaVerificationPrimitive
[ ] CryptoNative_RsaVerify
[ ] CryptoNative_SetEncryptionPolicy
[ ] CryptoNative_SetProtocolOptions
[ ] CryptoNative_SetRsaParameters
[X] CryptoNative_SetX509ChainVerifyTime - manager wrapper throw in case of failure
[ ] CryptoNative_SslAddExtraChainCert
[ ] CryptoNative_SslCreate
[ ] CryptoNative_SslCtxCheckPrivateKey
[ ] CryptoNative_SslCtxCreate
[ ] CryptoNative_SslCtxDestroy
[ ] CryptoNative_SslCtxSetAlpnProtos
[ ] CryptoNative_SslCtxSetAlpnSelectCb
[ ] CryptoNative_SslCtxSetCertVerifyCallback
[ ] CryptoNative_SslCtxSetClientCertCallback
[ ] CryptoNative_SslCtxSetQuietShutdown
[ ] CryptoNative_SslCtxSetVerify
[ ] CryptoNative_SslCtxUseCertificate
[ ] CryptoNative_SslCtxUsePrivateKey
[ ] CryptoNative_SslDestroy
[ ] CryptoNative_SslDoHandshake
[ ] CryptoNative_SSLEayVersion
[ ] CryptoNative_SslGet0AlpnSelected
[ ] CryptoNative_SslGetClientCAList
[ ] CryptoNative_SslGetError
[ ] CryptoNative_SslGetFinished
[ ] CryptoNative_SslGetPeerCertChain
[ ] CryptoNative_SslGetPeerCertificate
[ ] CryptoNative_SslGetPeerFinished
[ ] CryptoNative_SslGetVersion
[ ] CryptoNative_SslRead
[ ] CryptoNative_SslSessionReused
[ ] CryptoNative_SslSetAcceptState
[ ] CryptoNative_SslSetBio
[ ] CryptoNative_SslSetConnectState
[ ] CryptoNative_SslSetQuietShutdown
[ ] CryptoNative_SslSetTlsExtHostName
[ ] CryptoNative_SslShutdown
[ ] CryptoNative_SslV2_3Method
[ ] CryptoNative_SslWrite
[ ] CryptoNative_UpRefEvpPkey
[ ] CryptoNative_X509CheckIssued => single call not covered, needs to clean up error queue
[X] CryptoNative_X509CheckPurpose - single call covered by throw CreateOpenSslCryptographicException
[X] CryptoNative_X509CrlDestroy - actually calls X509_CRL_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509Destroy - actually calls X509_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509Duplicate => DEADCODE
[ ] CryptoNative_X509ExtensionCreateByObj => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs
[X] CryptoNative_X509ExtensionDestroy - actually calls X509_EXTENSION_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509ExtensionGetCritical - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_X509ExtensionGetData - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509ExtensionGetOid - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509GetExt - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509GetExtCount - single call, return does not indicate error or not, assuming that it doesn't log errorif we pass valid argument
[X] CryptoNative_X509GetIssuerName - single call covered by ChecckValidOpenSslHandle in LoadX500Name
[ ] CryptoNative_X509GetSerialNumber => called via X509GetSerialNumber_private in X509GetSerialNumber, check if caller or SafeInteriorHandle.OpenInteriorHandle handle error
[X] CryptoNative_X509GetSubjectName - single call covered by ChecckValidOpenSslHandle in LoadX500Name
[ ] CryptoNative_X509IssuerNameHash => single call returns hash, likely doesn't log errorif we pass valid argument, https://github.com/dotnet/corefx/issues/28724
[X] CryptoNative_X509NameDestroy - actually calls X509_NAME_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreAddCert - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509StoreAddCrl - covered in push to clean up error queue
[X] CryptoNative_X509StoreCreate - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509StoreCtxCreate - single call covered by CheckValidOpenSslHandle
[X] CryptoNative_X509StoreCtxDestroy - actually calls X509_STORE_CTX_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509StoreCtxGetChain => single call not covered, although calling method throws CryptographicException on other points
[ ] CryptoNative_X509StoreCtxGetError => single call returns code, likely doesn't log errorif we pass valid argument
[ ] CryptoNative_X509StoreCtxGetErrorDepth => single call returns code, likely doesn't log errorif we pass valid argument
[X] CryptoNative_X509StoreCtxGetSharedUntrusted - no actual call to lib
[X] CryptoNative_X509StoreCtxGetTargetCert - no actual call to lib
[X] CryptoNative_X509StoreCtxInit - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509StoreCtxSetVerifyCallback- single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreDestoryactually - calls X509_STORE_free ensuring the argument is not null, single call, it is void, assuming that it doesn't log error if we pass valid argument
[X] CryptoNative_X509StoreSetRevocationFlag - single call covered by throw Interop.Crypto.CreateOpenSslCryptographicException in case of failure
[X] CryptoNative_X509UpRef - called in many places,  internally calls CRYPTO_add, assuming that it doesn't log error if we pass valid argument
[ ] CryptoNative_X509V3ExtPrint => single call not covered, caller FormatNative in src\System.Security.Cryptography.Encoding\src\Internal\Cryptography\OpenSslAsnFormatter.cs
[ ] CryptoNative_X509VerifyCert => 2 calls one not covered in VerifyCertChain in src\System.Net.Http\src\System\Net\Http\CurlHandler\CurlHandler.SslProvider.Linux.cs
[X] CryptoNative_X509VerifyCertErrorString - single call, returns string for error code, likely doesn't log errorif we pass valid error code
